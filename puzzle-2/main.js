// main.js ‚Äî –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π + –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏ —Ñ–∏–∫—Å—ã –ø–æ touch

// ---------- –ü–ê–†–ê–ú–ï–¢–†–´ (–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ ROWS -> 6 –∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º PUZZLE_COLS/PUZZLE_ROWS) ----------
const COLS = 6;   // —à–∏—Ä–∏–Ω–∞ –ø–æ–ª—è (–Ω–µ–∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ)
const ROWS = 6;   // –≤—ã—Å–æ—Ç–∞ –ø–æ–ª—è ‚Äî –£–ë–†–ê–ù –ù–ò–ñ–ù–ò–ô –†–Ø–î (–±—ã–ª–æ 7)
const PUZZLE_COLS = 4; // –∑–æ–Ω–∞ –ø–∞–∑–ª–∞ —à–∏—Ä–∏–Ω–∞
const PUZZLE_ROWS = 4; // –∑–æ–Ω–∞ –ø–∞–∑–ª–∞ –≤—ã—Å–æ—Ç–∞

const CANVAS = document.getElementById('gameCanvas');
const CTX = CANVAS.getContext('2d');

// –¥–µ—Ä–∂–∏–º CELL –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º ‚Äî –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤ resizeCanvas()
let CELL = 80; // –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∑–∞–º–µ–Ω–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏)
let PUZZLE_OFFSET_X = 0;
let PUZZLE_OFFSET_Y = 0;

// –∫–∞—Ä—Ç–∏–Ω–∫–∏ (png) ‚Äî –ø–æ–ª–æ–∂–∏ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
const IMAGES = ['kartinka1.png', 'kartinka2.png', 'kartinka3.png'];
let chosenImageSrc = IMAGES[Math.floor(Math.random() * IMAGES.length)];
let puzzleImage = new Image();
puzzleImage.src = chosenImageSrc;

// —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let pieces = []; // –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ Piece
let dragging = null;
let dragOffsetX = 0, dragOffsetY = 0;

// ------- –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -------
function roundRectPath(ctx, x, y, w, h, r) {
  const radius = Math.min(r, w/2, h/2);
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + w - radius, y);
  ctx.quadraticCurveTo(x + w, y, x + w, y + radius);
  ctx.lineTo(x + w, y + h - radius);
  ctx.quadraticCurveTo(x + w, y + h, x + w - radius, y + h);
  ctx.lineTo(x + radius, y + h);
  ctx.quadraticCurveTo(x, y + h, x, y + h - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
}

// Piece –∫–ª–∞—Å—Å
class Piece {
  constructor(img, pieceCol, pieceRow, gx, gy) {
    this.img = img;
    this.pieceCol = pieceCol; // –∏—Å—Ö–æ–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–≤–Ω—É—Ç—Ä–∏ PUZZLE_COLS x PUZZLE_ROWS)
    this.pieceRow = pieceRow; // –∏—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    this.gx = gx; // —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ grid-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö (0..COLS-1, 0..ROWS-1)
    this.gy = gy;
    this.prevGx = gx;
    this.prevGy = gy;
    this.size = CELL;
  }

  // pixel –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ CELL
  get x() { return this.gx * CELL; }
  set x(px) { this.gx = Math.round(px / CELL); }

  get y() { return this.gy * CELL; }
  set y(py) { this.gy = Math.round(py / CELL); }

  // –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ (float-safe)
  getPxX() { return this.gx * CELL; }
  getPxY() { return this.gy * CELL; }

  // src rect –≤–Ω—É—Ç—Ä–∏ source image
  getSrcRect() {
    const w = this.img.width / PUZZLE_COLS;
    const h = this.img.height / PUZZLE_ROWS;
    return { sx: this.pieceCol * w, sy: this.pieceRow * h, sw: w, sh: h };
  }

  draw(ctx, isDragging=false) {
    const { sx, sy, sw, sh } = this.getSrcRect();
    const px = this.getPxX();
    const py = this.getPxY();
    ctx.save();
    roundRectPath(ctx, px, py, CELL, CELL, Math.min(12, CELL*0.15));
    ctx.clip();
    ctx.drawImage(this.img, sx, sy, sw, sh, px, py, CELL, CELL);
    ctx.restore();
    // —Ä–∞–º–∫–∞
    ctx.strokeStyle = 'rgba(0,0,0,0.12)';
    ctx.lineWidth = 1;
    roundRectPath(ctx, px + 0.5, py + 0.5, CELL - 1, CELL - 1, Math.min(12, CELL*0.15));
    ctx.stroke();
  }

  contains(px, py) {
    // px,py - pixel coordinates
    return px >= this.getPxX() && px <= this.getPxX() + CELL &&
           py >= this.getPxY() && py <= this.getPxY() + CELL;
  }
}

// –í—ã—á–∏—Å–ª—è–µ–º CELL –∏ –æ–±–Ω–æ–≤–ª—è–µ–º canvas —Ä–∞–∑–º–µ—Ä—ã; –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º offsets –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å–µ—Ç–∫–µ
function resizeCanvas() {
  // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ CELL —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å grid-–ø–æ–∑–∏—Ü–∏–∏
  const oldCell = CELL || 80;

  // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –æ–±–ª–∞—Å—Ç—å
  const maxWidth = Math.min(window.innerWidth * 0.95, 1000);
  const maxHeight = Math.min(window.innerHeight * 0.78, 1000);

  // CELL = —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä, —á—Ç–æ–±—ã —Å–µ—Ç–∫–∞ –≤—Å–µ–≥–¥–∞ —É–º–µ—Å—Ç–∏–ª–∞—Å—å
  CELL = Math.max(32, Math.floor(Math.min(maxWidth / COLS, maxHeight / ROWS)));

  // –∑–∞–¥–∞—ë–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã canvas
  CANVAS.width = COLS * CELL;
  CANVAS.height = ROWS * CELL;

  // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º canvas –≤ —ç–ª–µ–º–µ–Ω—Ç–µ (css –¥–µ–ª–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, canvas —Å–∞–º –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä)
  // –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º puzzle offset
  PUZZLE_OFFSET_X = Math.floor((COLS - PUZZLE_COLS) / 2) * CELL;
  PUZZLE_OFFSET_Y = Math.floor((ROWS - PUZZLE_ROWS) / 2) * CELL;

  // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫—É—Å–æ—á–∫–∏ ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ö grid-–ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ä–æ–π –∫–ª–µ—Ç–∫–µ
  if (pieces.length) {
    pieces.forEach(p => {
      // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º grid –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞:
      const gx = Math.round((p.getPxX()) / oldCell);
      const gy = Math.round((p.getPxY()) / oldCell);
      p.gx = Math.max(0, Math.min(COLS - 1, gx));
      p.gy = Math.max(0, Math.min(ROWS - 1, gy));
      p.prevGx = p.gx;
      p.prevGy = p.gy;
    });
  }
  draw();
}

// –°–æ–∑–¥–∞—ë–º –∫—É—Å–æ—á–∫–∏ ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–Ω–¥–æ–º –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π (grid-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
function createPiecesRandom() {
  pieces = [];
  // —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö grid-—è—á–µ–π
  const all = [];
  for (let r = 0; r < ROWS; r++) {
    for (let c = 0; c < COLS; c++) {
      all.push({ gx: c, gy: r });
    }
  }
  shuffleArray(all);

  let idx = 0;
  for (let r = 0; r < PUZZLE_ROWS; r++) {
    for (let c = 0; c < PUZZLE_COLS; c++) {
      const cell = all[idx++]; // —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–ª–µ—Ç–∫–∞
      pieces.push(new Piece(puzzleImage, c, r, cell.gx, cell.gy));
    }
  }
}

// –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ (–±–µ–∑ —Å–º–µ–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏, –±–µ–∑ –Ω–∞–ª–æ–∂–µ–Ω–∏–π) ‚Äî –Ω–∞–∑–Ω–∞—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
function reshufflePositions() {
  const all = [];
  for (let r = 0; r < ROWS; r++) {
    for (let c = 0; c < COLS; c++) {
      all.push({ gx: c, gy: r });
    }
  }
  shuffleArray(all);
  for (let i = 0; i < pieces.length; i++) {
    const cell = all[i];
    pieces[i].gx = cell.gx;
    pieces[i].gy = cell.gy;
    pieces[i].prevGx = cell.gx;
    pieces[i].prevGy = cell.gy;
  }
  draw();
}

// Fisher-Yates
function shuffleArray(a) {
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

// –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É, –∑–æ–Ω—É –∏ –∫—É—Å–æ—á–∫–∏
function draw() {
  CTX.clearRect(0, 0, CANVAS.width, CANVAS.height);

  // —Å–µ—Ç–∫–∞ (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è)
  CTX.strokeStyle = 'rgba(0,0,0,0.08)';
  CTX.lineWidth = 1;
  for (let r = 0; r <= ROWS; r++) {
    CTX.beginPath();
    CTX.moveTo(0, r * CELL + 0.5);
    CTX.lineTo(CANVAS.width, r * CELL + 0.5);
    CTX.stroke();
  }
  for (let c = 0; c <= COLS; c++) {
    CTX.beginPath();
    CTX.moveTo(c * CELL + 0.5, 0);
    CTX.lineTo(c * CELL + 0.5, CANVAS.height);
    CTX.stroke();
  }

  // –∑–µ–ª—ë–Ω–∞—è —Ä–∞–º–∫–∞ (—Å–∫—Ä—É–≥–ª—ë–Ω–Ω–∞—è) –≤–æ–∫—Ä—É–≥ PUZZLE_COLS x PUZZLE_ROWS
  CTX.strokeStyle = '#1fa42a';
  CTX.lineWidth = 4;
  roundRectPath(CTX, PUZZLE_OFFSET_X, PUZZLE_OFFSET_Y, PUZZLE_COLS * CELL, PUZZLE_ROWS * CELL, Math.min(20, CELL * 0.2));
  CTX.stroke();

  // draw pieces (dragging on top)
  for (const p of pieces) {
    if (p !== dragging) p.draw(CTX, false);
  }
  if (dragging) dragging.draw(CTX, true);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏
function checkSolved() {
  let ok = true;
  for (const p of pieces) {
    const targetGx = Math.floor((PUZZLE_OFFSET_X) / CELL) + p.pieceCol;
    const targetGy = Math.floor((PUZZLE_OFFSET_Y) / CELL) + p.pieceRow;
    if (p.gx !== targetGx || p.gy !== targetGy) { ok = false; break; }
  }
  if (ok) {
    alert('üéâ –ü–∞–∑–ª —Å–æ–±—Ä–∞–Ω!');
  } else {
    alert('–ü–æ–∫–∞ –Ω–µ –≤—Å—ë –Ω–∞ –º–µ—Å—Ç–µ.');
  }
}

// pointer events (—Ä–∞–±–æ—Ç–∞—é—Ç –¥–ª—è –º—ã—à–∏ –∏ touch)
CANVAS.addEventListener('pointerdown', (e) => {
  const rect = CANVAS.getBoundingClientRect();
  const px = e.clientX - rect.left;
  const py = e.clientY - rect.top;

  for (let i = pieces.length - 1; i >= 0; i--) {
    if (pieces[i].contains(px, py)) {
      dragging = pieces[i];
      // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ grid-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–ª—è –æ—Ç–∫–∞—Ç–∞)
      dragging.prevGx = dragging.gx;
      dragging.prevGy = dragging.gy;
      // —Å–º–µ—â–µ–Ω–∏–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö –≤–Ω—É—Ç—Ä–∏ –∫–ª–µ—Ç–∫–∏
      dragOffsetX = px - dragging.getPxX();
      dragOffsetY = py - dragging.getPxY();
      // –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞ (—á—Ç–æ–±—ã —Ä–∏—Å–æ–≤–∞—Ç—å —Å–≤–µ—Ä—Ö—É)
      pieces.push(pieces.splice(i, 1)[0]);
      try { CANVAS.setPointerCapture(e.pointerId); } catch (err) {}
      draw();
      break;
    }
  }
});

CANVAS.addEventListener('pointermove', (e) => {
  if (!dragging) return;
  const rect = CANVAS.getBoundingClientRect();
  const px = e.clientX - rect.left;
  const py = e.clientY - rect.top;

  // —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ grid (—Ü–µ–ª–∞—è –∫–ª–µ—Ç–∫–∞)
  let newPxX = px - dragOffsetX;
  let newPxY = py - dragOffsetY;

  // –∫–æ–Ω—Å—Ç—Ä–µ–π–Ω –≤–Ω—É—Ç—Ä–∏ –∫–∞–Ω–≤–∞—Å–∞
  newPxX = Math.max(0, Math.min(CANVAS.width - CELL, newPxX));
  newPxY = Math.max(0, Math.min(CANVAS.height - CELL, newPxY));

  // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º –≤ grid-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ)
  dragging.gx = Math.round(newPxX / CELL);
  dragging.gy = Math.round(newPxY / CELL);

  draw();
});

CANVAS.addEventListener('pointerup', (e) => {
  if (!dragging) return;

  // snap: —É–∂–µ –≤ grid coords, –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–º
  dragging.gx = Math.max(0, Math.min(COLS - 1, dragging.gx));
  dragging.gy = Math.max(0, Math.min(ROWS - 1, dragging.gy));

  // –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–ª–µ—Ç–∫–∏?
  const occupied = pieces.some(p => p !== dragging && p.gx === dragging.gx && p.gy === dragging.gy);

  if (occupied) {
    // –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –Ω–∞ prev grid
    dragging.gx = dragging.prevGx;
    dragging.gy = dragging.prevGy;
  } else {
    // –Ω–æ–≤–∞—è prev –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    dragging.prevGx = dragging.gx;
    dragging.prevGy = dragging.gy;
  }

  try { CANVAS.releasePointerCapture(e.pointerId); } catch (err) {}
  dragging = null;
  draw();
});

CANVAS.addEventListener('pointercancel', () => {
  if (!dragging) return;
  dragging.gx = dragging.prevGx;
  dragging.gy = dragging.prevGy;
  dragging = null;
  draw();
});

// –∫–Ω–æ–ø–∫–∏
document.getElementById('restartButton').addEventListener('click', () => reshufflePositions());
document.getElementById('checkButton').addEventListener('click', () => checkSolved());

// –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚Äî —Å—Ç–∞—Ä—Ç
puzzleImage.onload = () => {
  resizeCanvas();         // –≤—ã—á–∏—Å–ª–∏–º CELL & —Ä–∞–∑–º–µ—Ä—ã
  createPiecesRandom();
  draw();
};

// –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É–∂–µ –≤ –∫—ç—à–µ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
if (puzzleImage.complete) {
  resizeCanvas();
  createPiecesRandom();
  draw();
}

// –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏ —Ä–µ—Å–∞–π–∑–µ —ç–∫—Ä–∞–Ω–∞
window.addEventListener('resize', () => {
  const hadPieces = pieces.length > 0;
  const oldPieces = pieces.slice(); // –∫–æ–ø–∏—è
  // –ø–µ—Ä–µ—Å—á—ë—Ç CELL –∏ –ø–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –≤–Ω—É—Ç—Ä–∏ resizeCanvas()
  resizeCanvas();
  // –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ prev –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫ –Ω–æ–≤–æ–π —Å–µ—Ç–∫–µ —É–∂–µ –¥–µ–ª–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ resizeCanvas
  draw();
});

// üîí —Ñ–∏–∫—Å ‚Ññ4 ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç touchmove —Ç–æ–ª—å–∫–æ –¥–ª—è canvas
document.body.addEventListener(
  "touchmove",
  function (e) {
    if (e.target.closest("canvas")) {
      e.preventDefault();
    }
  },
  { passive: false }
);

